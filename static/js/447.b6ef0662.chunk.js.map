{"version":3,"file":"static/js/447.b6ef0662.chunk.js","mappings":"sSAEMA,E,MAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAW,mCAAG,WAAMC,GAAN,yFACAN,EAASO,IAAI,uBADb,uBACfC,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKXC,EAAe,mCAAG,WAAMC,GAAN,yFACJV,EAASO,IAAI,gBAAiB,CACjDJ,OAAQ,CACJO,MAAAA,KAHmB,uBACnBF,EADmB,EACnBA,KADmB,kBAMpBA,GANoB,2CAAH,sDASfG,EAAe,mCAAG,WAAMC,GAAN,yFACJZ,EAASO,IAAT,iBAAuBK,IADnB,uBACnBJ,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKfK,EAAe,mCAAG,WAAMD,GAAN,yFACJZ,EAASO,IAAT,iBAAuBK,EAAvB,aADI,uBACnBJ,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKfM,EAAe,mCAAG,WAAMF,GAAN,yFACJZ,EAASO,IAAT,iBAAuBK,EAAvB,aADI,uBACnBJ,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,qD,+ICtB1B,EATiB,SAAC,GAAe,IACzBO,EADwB,EAAZC,MACIC,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASP,EAApB,EAAoBA,GAApB,OACxB,2BACI,oCAAYM,MACZ,uBAAIC,MAFCP,EADe,IAKxB,OAAO,wBAAKG,GACf,ECJY,SAASK,IACpB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBV,OAfEE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,mCAAG,6FACfJ,EAAS,MADM,mBAGeX,EAAAA,EAAAA,IAAgBY,GAH/B,gBAGHI,EAHG,EAGHA,QACRP,EAAUO,GAJC,gDAOXL,EAAS,EAAD,IAPG,yDAAH,qDAUhBI,GACH,GAAE,CAACH,KAIJ,2BACKF,IAAS,sFACTF,EAAOS,OAAS,IAAK,SAAC,EAAD,CAAYf,MAAOM,KACvCA,EAAOS,SAAU,qEAG1B,C","sources":["api/api.js","components/ReviewCard/ReviewCard.jsx","pages/Movies/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: '35f52823224968ebaf30f4a5ee6d071a',\n    }\n})\n\nexport const getTrending = async(page) => {\n    const { data } = await instance.get(\"/trending/movie/day\");\n    return data;\n}\n\nexport const getSearchMovies = async(query) => {\n    const { data } = await instance.get(\"/search/movie\", {\n        params: {\n            query,\n        }\n    })\n    return data;\n}\n\nexport const getMovieDetails = async(id) => {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n}\n\nexport const getMovieCredits = async(id) => {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data;\n}\n\nexport const getMovieReviews = async(id) => {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n}\n","import PropTypes from \"prop-types\";\n\nconst ReviewCard = ({ items }) => {\n    const element = items.map(({ author, content, id }) => \n      <li key={id}>\n          <b>Author: {author}</b>\n          <p>{content}</p>\n      </li>)\n      return <ul>{element}</ul>\n  }\n  \n  export default ReviewCard;\n\n  ReviewCard.propTypes = {\n    items: PropTypes.arrayOf(PropTypes.shape({\n        author: PropTypes.string.isRequired,\n        content: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired\n    }))\n  }\n","import { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { getMovieReviews } from \"api/api\"\nimport ReviewCard from \"components/ReviewCard/ReviewCard\";\n\nexport default function Reviews() {\n    const [review, setReview] = useState([]);\n    const [error, setError] = useState(null);\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const fetchMovie = async() => {\n            setError(null);\n            try {\n                const { results } = await getMovieReviews(movieId);\n                setReview(results);\n            } \n            catch (error) {\n                setError(error);\n            }\n        }\n        fetchMovie();\n    }, [movieId]);\n    \n\n  return (\n    <div>\n        {error && <h2>Oops, something went wrong. Please try to reload the page</h2>}\n        {review.length > 0 && <ReviewCard items={review}/>}\n        {!review.length && <b>There are no reviews for this movie yet</b>}\n    </div>\n  )\n}\n"],"names":["instance","axios","baseURL","params","api_key","getTrending","page","get","data","getSearchMovies","query","getMovieDetails","id","getMovieCredits","getMovieReviews","element","items","map","author","content","Reviews","useState","review","setReview","error","setError","movieId","useParams","useEffect","fetchMovie","results","length"],"sourceRoot":""}