{"version":3,"file":"static/js/540.b9d36df4.chunk.js","mappings":"ySAEMA,E,QAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAQ,CACJC,QAAS,sCAIJC,EAAW,mCAAG,WAAMC,GAAN,yFACAN,EAASO,IAAI,uBADb,uBACfC,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,sDAKXC,EAAe,mCAAG,WAAMC,GAAN,yFACJV,EAASO,IAAI,gBAAiB,CACjDJ,OAAQ,CACJO,MAAAA,KAHmB,uBACnBF,EADmB,EACnBA,KADmB,kBAMpBA,GANoB,2CAAH,sDASfG,EAAe,mCAAG,WAAMC,GAAN,yFACJZ,EAASO,IAAT,iBAAuBK,IADnB,uBACnBJ,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKfK,EAAe,mCAAG,WAAMD,GAAN,yFACJZ,EAASO,IAAT,iBAAuBK,EAAvB,aADI,uBACnBJ,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKfM,EAAe,mCAAG,WAAMF,GAAN,yFACJZ,EAASO,IAAT,iBAAuBK,EAAvB,aADI,uBACnBJ,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,qD,kKC/BfO,EAAWC,EAAAA,GAAAA,GAAH,mMAcRC,EAAWD,EAAAA,GAAAA,GAAH,uC,SCFrB,EAViB,SAAC,GAAe,IACzBE,EADwB,EAAZC,MACIC,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,QAAlC,OACxB,UAACP,EAAD,WACKI,GAAe,gBAAKI,IAAG,yCAAoCJ,GAAgBK,IAAKH,KAAW,gBAAKE,IAAI,uCAAuCC,IAAI,iBAChJ,uBAAIH,KACJ,uCAAeD,OAHJE,EADS,IAMxB,OAAO,SAACT,EAAD,UAAWG,GACrB,ECPc,SAASS,IAEpB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBV,OAdEE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,mCAAG,6FACfJ,EAAS,MADM,mBAGYnB,EAAAA,EAAAA,IAAgBoB,GAH5B,gBAGHJ,EAHG,EAGHA,KACRC,EAAQD,GAJG,gDAOXG,EAAS,EAAD,IAPG,yDAAH,qDAUhBI,GACH,GAAE,CAACH,KAGJ,2BACKF,IAAS,sFACTF,IAAQ,SAAC,EAAD,CAAUV,MAAOU,MAGjC,C","sources":["api/api.js","components/CastCard/CastCardStyled.js","components/CastCard/CastCard.jsx","pages/Movies/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: '35f52823224968ebaf30f4a5ee6d071a',\n    }\n})\n\nexport const getTrending = async(page) => {\n    const { data } = await instance.get(\"/trending/movie/day\");\n    return data;\n}\n\nexport const getSearchMovies = async(query) => {\n    const { data } = await instance.get(\"/search/movie\", {\n        params: {\n            query,\n        }\n    })\n    return data;\n}\n\nexport const getMovieDetails = async(id) => {\n    const { data } = await instance.get(`/movie/${id}`);\n    return data;\n}\n\nexport const getMovieCredits = async(id) => {\n    const { data } = await instance.get(`/movie/${id}/credits`);\n    return data;\n}\n\nexport const getMovieReviews = async(id) => {\n    const { data } = await instance.get(`/movie/${id}/reviews`);\n    return data;\n}\n","import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\ndisplay: flex;\njustify-content: center;\nflex-wrap: wrap;\n\npadding-inline-start: 0;\n\nlist-style: none;\n\n& li:not(:nth-child(6n + 6)) {\n    margin-right: 20px;\n}\n`\n\nexport const CastItem = styled.li`\nwidth: 200px;\n`","import PropTypes from \"prop-types\";\n\nimport { CastList, CastItem } from \"./CastCardStyled\";\n\nconst CastCard = ({ items }) => {\n  const element = items.map(({ profile_path, character, name, cast_id }) => \n    <CastItem key={cast_id}>\n        {profile_path ? <img src={`https://image.tmdb.org/t/p/w200${profile_path}`} alt={name} /> : <img src=\"http://dummyimage.com/200x300/c0c0c0\" alt=\"placeholder\" />}\n        <b>{name}</b>\n        <p>Character: {character}</p>\n    </CastItem>)\n    return <CastList>{element}</CastList>\n}\n\nexport default CastCard;\n\nCastCard.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    profile_path: PropTypes.string,\n    character: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    cast_id: PropTypes.number.isRequired,\n  }))\n}","import { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { getMovieCredits } from \"api/api\";\nimport CastCard from \"components/CastCard/CastCard\";\n\nexport default function Cast() {\n\n    const [cast, setCast] = useState(null);\n    const [error, setError] = useState(null);\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const fetchMovie = async() => {\n            setError(null);\n            try {\n                const { cast } = await getMovieCredits(movieId);\n                setCast(cast);\n            } \n            catch (error) {\n                setError(error);\n            }\n        }\n        fetchMovie();\n    }, [movieId]);\n\n  return (\n    <div>\n        {error && <h2>Oops, something went wrong. Please try to reload the page</h2>}\n        {cast && <CastCard items={cast}/>}\n    </div>\n  )\n}\n"],"names":["instance","axios","baseURL","params","api_key","getTrending","page","get","data","getSearchMovies","query","getMovieDetails","id","getMovieCredits","getMovieReviews","CastList","styled","CastItem","element","items","map","profile_path","character","name","cast_id","src","alt","Cast","useState","cast","setCast","error","setError","movieId","useParams","useEffect","fetchMovie"],"sourceRoot":""}